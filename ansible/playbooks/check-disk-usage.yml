- hosts: all
  become: true

  vars:
    # Define colors for different severity levels
    severity_colors:
      normal: 3066993    # Green
      warning: 16776960  # Yellow
      critical: 15158332 # Red
  
  tasks:
    # Gather basic system info
    - name: Get hostname
      command: hostname -f
      register: hostname
      changed_when: false

    - name: Get OS info
      command: cat /etc/os-release
      register: os_info
      changed_when: false

    - name: Get system uptime
      command: uptime -p
      register: uptime
      changed_when: false

    # Get disk usage for all mounted partitions
    - name: Get disk usage for all partitions
      command: df -h --output=source,target,size,used,avail,pcent
      register: disk_info
      changed_when: false

    # Get memory usage
    - name: Get memory info
      command: free -h
      register: memory_info
      changed_when: false

    # Calculate highest disk usage percentage
    - name: Get highest disk usage percentage
      shell: df --output=pcent / | tail -n 1 | tr -d '% '
      register: highest_disk_percent
      changed_when: false

    # Determine severity color based on disk usage
    - name: Set message color based on severity
      set_fact:
        message_color: >-
          {{
            severity_colors.critical if highest_disk_percent.stdout|int > 90
            else severity_colors.warning if highest_disk_percent.stdout|int > 80
            else severity_colors.normal
          }}

    # Format disk usage information
    - name: Format disk information
      set_fact:
        disk_fields: >-
          {%- set fields = [] -%}
          {%- for line in disk_info.stdout_lines[1:] -%}
            {%- set parts = line.split() -%}
            {%- if parts|length >= 6 -%}
              {{- fields.append({
                'name': 'Partition: ' ~ parts[1],
                'value': 'Size: ' ~ parts[2] ~ '\nUsed: ' ~ parts[3] ~ ' (' ~ parts[5] ~ ')\nFree: ' ~ parts[4],
                'inline': true
              }) -}}
            {%- endif -%}
          {%- endfor -%}
          {{- fields -}}

    # Send Discord notification
    - name: Send Discord notification
      uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        body: |
          {
            "embeds": [{
              "title": "System Status Report",
              "description": "Status report for **{{ hostname.stdout }}**",
              "color": {{ message_color }},
              "fields": [
                {
                  "name": "System Information",
                  "value": "OS: {{ os_info.stdout_lines[1] | regex_replace('^NAME=|\"', '') }}\nUptime: {{ uptime.stdout }}"
                },
                {
                  "name": "Memory Usage",
                  "value": "```{{ memory_info.stdout }}```"
                }
              ]
              {%- if disk_fields|length > 0 -%}
              ,
              "fields": {{ disk_fields }}
              {%- endif -%},
              "footer": {
                "text": "Last updated: {{ ansible_date_time.iso8601 }}"
              }
            }]
          }
        headers:
          Content-Type: application/json
        status_code: [204, 200]  # Discord can return either
      when: highest_disk_percent.stdout|int > 80
